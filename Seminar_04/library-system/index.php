<?php
/**
 * Точка входа в приложение библиотечной системы
 * 
 * Демонстрирует работу с фабрикой книг, создание книг разных типов
 * и сбор статистики по их прочтениям.
 */

// Подключаем автозагрузчик Composer
require_once __DIR__ . '/vendor/autoload.php';

use LibrarySystem\Factories\BookFactory;

/**
 * Основной код приложения
 * 
 * 1. Создает экземпляр фабрики книг (паттерн Одиночка)
 * 2. Создает книги разных типов (цифровую и бумажную)
 * 3. Демонстрирует получение книг с разными стратегиями доставки
 * 4. Выводит статистику по прочтениям
 */

try {
    // Получаем экземпляр фабрики книг
    $bookFactory = BookFactory::getInstance();

    // Создаем цифровую книгу
    $digitalBook = $bookFactory->createDigitalBook(
        "PHP 8 для профессионалов", 
        "Кевин Тратросс", 
        2023,
        "https://example.com/books/php8"
    );

    // Создаем бумажную книгу
    $physicalBook = $bookFactory->createPhysicalBook(
        "Совершенный код", 
        "Стив Макконнелл", 
        2022,
        "ул. Читательская, 123", 
        "A5"
    );

    // Демонстрируем получение цифровой книги
    echo "\n=== Получение цифровой книги ===\n";
    echo $digitalBook->getBook() . "\n";

    // Демонстрируем получение бумажной книги
    echo "\n=== Получение бумажной книги ===\n";
    echo $physicalBook->getBook() . "\n";

    // Демонстрируем повторное получение цифровой книги
    echo "\n=== Повторное получение цифровой книги ===\n";
    echo $digitalBook->getBook() . "\n";

    // Выводим собранную статистику
    echo "\n=== Статистика по книгам ===\n";
    print_r($bookFactory->getStatistics());

} catch (\Exception $e) {
    // Обработка исключений
    echo "\nОшибка: " . $e->getMessage() . "\n";
    echo "Файл: " . $e->getFile() . " (строка: " . $e->getLine() . ")\n";
    echo "Трассировка: \n" . $e->getTraceAsString() . "\n";
}
